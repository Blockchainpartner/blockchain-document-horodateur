// Code generated by protoc-gen-go. DO NOT EDIT.
// source: description.proto

/*
Package rcgech is a generated protocol buffer package.

It is generated from these files:
	description.proto

It has these top-level messages:
	FID
	Excerpt
*/
package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FID struct {
	First    uint64 `protobuf:"varint,1,opt,name=first" json:"first,omitempty"`
	Second   uint64 `protobuf:"varint,2,opt,name=second" json:"second,omitempty"`
	Third    uint64 `protobuf:"varint,3,opt,name=third" json:"third,omitempty"`
	Langcode uint32 `protobuf:"varint,4,opt,name=langcode" json:"langcode,omitempty"`
}

func (m *FID) Reset()                    { *m = FID{} }
func (m *FID) String() string            { return proto.CompactTextString(m) }
func (*FID) ProtoMessage()               {}
func (*FID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FID) GetFirst() uint64 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *FID) GetSecond() uint64 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *FID) GetThird() uint64 {
	if m != nil {
		return m.Third
	}
	return 0
}

func (m *FID) GetLangcode() uint32 {
	if m != nil {
		return m.Langcode
	}
	return 0
}

type Excerpt struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Excerpt) Reset()                    { *m = Excerpt{} }
func (m *Excerpt) String() string            { return proto.CompactTextString(m) }
func (*Excerpt) ProtoMessage()               {}
func (*Excerpt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Excerpt) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*FID)(nil), "rcgech.FID")
	proto.RegisterType((*Excerpt)(nil), "rcgech.Excerpt")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RegisterProxy service

type RegisterProxyClient interface {
	GetExcerpt(ctx context.Context, in *FID, opts ...grpc.CallOption) (*Excerpt, error)
}

type registerProxyClient struct {
	cc *grpc.ClientConn
}

func NewRegisterProxyClient(cc *grpc.ClientConn) RegisterProxyClient {
	return &registerProxyClient{cc}
}

func (c *registerProxyClient) GetExcerpt(ctx context.Context, in *FID, opts ...grpc.CallOption) (*Excerpt, error) {
	out := new(Excerpt)
	err := grpc.Invoke(ctx, "/rcgech.RegisterProxy/GetExcerpt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RegisterProxy service

type RegisterProxyServer interface {
	GetExcerpt(context.Context, *FID) (*Excerpt, error)
}

func RegisterRegisterProxyServer(s *grpc.Server, srv RegisterProxyServer) {
	s.RegisterService(&_RegisterProxy_serviceDesc, srv)
}

func _RegisterProxy_GetExcerpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterProxyServer).GetExcerpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rcgech.RegisterProxy/GetExcerpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterProxyServer).GetExcerpt(ctx, req.(*FID))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegisterProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rcgech.RegisterProxy",
	HandlerType: (*RegisterProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExcerpt",
			Handler:    _RegisterProxy_GetExcerpt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "description.proto",
}

func init() { proto.RegisterFile("description.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0xcf, 0xc1, 0x6a, 0x84, 0x30,
	0x10, 0x06, 0xe0, 0x5a, 0xad, 0x2d, 0xd3, 0x4a, 0x69, 0x28, 0x25, 0x08, 0x05, 0xf1, 0xe4, 0xa1,
	0x78, 0x68, 0xcf, 0xbd, 0x59, 0x8b, 0xb7, 0x92, 0x37, 0xb0, 0xc9, 0xac, 0x06, 0x16, 0x23, 0x93,
	0x39, 0xb8, 0x6f, 0xbf, 0x6c, 0xd4, 0xbd, 0xe5, 0xcb, 0xfc, 0xc3, 0xcc, 0xc0, 0x8b, 0x41, 0xaf,
	0xc9, 0xce, 0x6c, 0xdd, 0x54, 0xcf, 0xe4, 0xd8, 0x89, 0x94, 0xf4, 0x80, 0x7a, 0x2c, 0x11, 0xe2,
	0xb6, 0x6b, 0xc4, 0x2b, 0xdc, 0x1d, 0x2c, 0x79, 0x96, 0x51, 0x11, 0x55, 0x89, 0x5a, 0x21, 0xde,
	0x20, 0xf5, 0xa8, 0xdd, 0x64, 0xe4, 0x6d, 0xf8, 0xde, 0x74, 0x49, 0xf3, 0x68, 0xc9, 0xc8, 0x78,
	0x4d, 0x07, 0x88, 0x1c, 0x1e, 0x8e, 0xfd, 0x34, 0x68, 0x67, 0x50, 0x26, 0x45, 0x54, 0x65, 0xea,
	0xea, 0xf2, 0x1d, 0xee, 0x7f, 0x16, 0x8d, 0x34, 0xb3, 0x10, 0x90, 0x98, 0x9e, 0xfb, 0x30, 0xe9,
	0x49, 0x85, 0xf7, 0xe7, 0x37, 0x64, 0x0a, 0x07, 0xeb, 0x19, 0xe9, 0x8f, 0xdc, 0x72, 0x12, 0x1f,
	0x00, 0xbf, 0xc8, 0x7b, 0xcb, 0x63, 0xbd, 0x6e, 0x5b, 0xb7, 0x5d, 0x93, 0x3f, 0xef, 0xd8, 0xaa,
	0xe5, 0xcd, 0x7f, 0x1a, 0x6e, 0xfa, 0x3a, 0x07, 0x00, 0x00, 0xff, 0xff, 0x12, 0x11, 0x62, 0xa5,
	0xe8, 0x00, 0x00, 0x00,
}
